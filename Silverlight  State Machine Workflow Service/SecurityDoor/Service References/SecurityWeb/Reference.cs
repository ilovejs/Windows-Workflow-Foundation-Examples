//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SecurityDoor.SecurityWeb {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizeResponse", Namespace="http://schemas.datacontract.org/2004/07/SecurityDoor.Contracts")]
    public partial class AuthorizeResponse : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool AlertField;
        
        private bool AuthorizedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Alert {
            get {
                return this.AlertField;
            }
            set {
                if ((this.AlertField.Equals(value) != true)) {
                    this.AlertField = value;
                    this.RaisePropertyChanged("Alert");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Authorized {
            get {
                return this.AuthorizedField;
            }
            set {
                if ((this.AuthorizedField.Equals(value) != true)) {
                    this.AuthorizedField = value;
                    this.RaisePropertyChanged("Authorized");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://microsoft.com/samples/wf4/", ConfigurationName="SecurityWeb.ISecurityDoorService")]
    public interface ISecurityDoorService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://microsoft.com/samples/wf4/ISecurityDoorService/NotifyDoorStatus")]
        System.IAsyncResult BeginNotifyDoorStatus(int RoomNumber, bool IsOpen, bool IsLocked, System.AsyncCallback callback, object asyncState);
        
        void EndNotifyDoorStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://microsoft.com/samples/wf4/ISecurityDoorService/AuthorizeKey", ReplyAction="http://microsoft.com/samples/wf4/ISecurityDoorService/AuthorizeKeyResponse")]
        System.IAsyncResult BeginAuthorizeKey(int RoomNumber, System.Guid CardKey, System.TimeSpan Timeout, int IntrusionThreshold, System.AsyncCallback callback, object asyncState);
        
        [return: System.ServiceModel.MessageParameterAttribute(Name="Authorized")]
        SecurityDoor.SecurityWeb.AuthorizeResponse EndAuthorizeKey(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://microsoft.com/samples/wf4/ISecurityDoorService/DoorReset", ReplyAction="http://microsoft.com/samples/wf4/ISecurityDoorService/DoorResetResponse")]
        System.IAsyncResult BeginDoorReset(int RoomNumber, System.Guid CardKey, System.TimeSpan Timeout, int IntrusionThreshold, System.AsyncCallback callback, object asyncState);
        
        [return: System.ServiceModel.MessageParameterAttribute(Name="Authorized")]
        SecurityDoor.SecurityWeb.AuthorizeResponse EndDoorReset(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecurityDoorServiceChannel : SecurityDoor.SecurityWeb.ISecurityDoorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorizeKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthorizeKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SecurityDoor.SecurityWeb.AuthorizeResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SecurityDoor.SecurityWeb.AuthorizeResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DoorResetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DoorResetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SecurityDoor.SecurityWeb.AuthorizeResponse Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SecurityDoor.SecurityWeb.AuthorizeResponse)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecurityDoorServiceClient : System.ServiceModel.ClientBase<SecurityDoor.SecurityWeb.ISecurityDoorService>, SecurityDoor.SecurityWeb.ISecurityDoorService {
        
        private BeginOperationDelegate onBeginNotifyDoorStatusDelegate;
        
        private EndOperationDelegate onEndNotifyDoorStatusDelegate;
        
        private System.Threading.SendOrPostCallback onNotifyDoorStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthorizeKeyDelegate;
        
        private EndOperationDelegate onEndAuthorizeKeyDelegate;
        
        private System.Threading.SendOrPostCallback onAuthorizeKeyCompletedDelegate;
        
        private BeginOperationDelegate onBeginDoorResetDelegate;
        
        private EndOperationDelegate onEndDoorResetDelegate;
        
        private System.Threading.SendOrPostCallback onDoorResetCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SecurityDoorServiceClient() {
        }
        
        public SecurityDoorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SecurityDoorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecurityDoorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecurityDoorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> NotifyDoorStatusCompleted;
        
        public event System.EventHandler<AuthorizeKeyCompletedEventArgs> AuthorizeKeyCompleted;
        
        public event System.EventHandler<DoorResetCompletedEventArgs> DoorResetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SecurityDoor.SecurityWeb.ISecurityDoorService.BeginNotifyDoorStatus(int RoomNumber, bool IsOpen, bool IsLocked, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNotifyDoorStatus(RoomNumber, IsOpen, IsLocked, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SecurityDoor.SecurityWeb.ISecurityDoorService.EndNotifyDoorStatus(System.IAsyncResult result) {
            base.Channel.EndNotifyDoorStatus(result);
        }
        
        private System.IAsyncResult OnBeginNotifyDoorStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int RoomNumber = ((int)(inValues[0]));
            bool IsOpen = ((bool)(inValues[1]));
            bool IsLocked = ((bool)(inValues[2]));
            return ((SecurityDoor.SecurityWeb.ISecurityDoorService)(this)).BeginNotifyDoorStatus(RoomNumber, IsOpen, IsLocked, callback, asyncState);
        }
        
        private object[] OnEndNotifyDoorStatus(System.IAsyncResult result) {
            ((SecurityDoor.SecurityWeb.ISecurityDoorService)(this)).EndNotifyDoorStatus(result);
            return null;
        }
        
        private void OnNotifyDoorStatusCompleted(object state) {
            if ((this.NotifyDoorStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NotifyDoorStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NotifyDoorStatusAsync(int RoomNumber, bool IsOpen, bool IsLocked) {
            this.NotifyDoorStatusAsync(RoomNumber, IsOpen, IsLocked, null);
        }
        
        public void NotifyDoorStatusAsync(int RoomNumber, bool IsOpen, bool IsLocked, object userState) {
            if ((this.onBeginNotifyDoorStatusDelegate == null)) {
                this.onBeginNotifyDoorStatusDelegate = new BeginOperationDelegate(this.OnBeginNotifyDoorStatus);
            }
            if ((this.onEndNotifyDoorStatusDelegate == null)) {
                this.onEndNotifyDoorStatusDelegate = new EndOperationDelegate(this.OnEndNotifyDoorStatus);
            }
            if ((this.onNotifyDoorStatusCompletedDelegate == null)) {
                this.onNotifyDoorStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNotifyDoorStatusCompleted);
            }
            base.InvokeAsync(this.onBeginNotifyDoorStatusDelegate, new object[] {
                        RoomNumber,
                        IsOpen,
                        IsLocked}, this.onEndNotifyDoorStatusDelegate, this.onNotifyDoorStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SecurityDoor.SecurityWeb.ISecurityDoorService.BeginAuthorizeKey(int RoomNumber, System.Guid CardKey, System.TimeSpan Timeout, int IntrusionThreshold, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthorizeKey(RoomNumber, CardKey, Timeout, IntrusionThreshold, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SecurityDoor.SecurityWeb.AuthorizeResponse SecurityDoor.SecurityWeb.ISecurityDoorService.EndAuthorizeKey(System.IAsyncResult result) {
            return base.Channel.EndAuthorizeKey(result);
        }
        
        private System.IAsyncResult OnBeginAuthorizeKey(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int RoomNumber = ((int)(inValues[0]));
            System.Guid CardKey = ((System.Guid)(inValues[1]));
            System.TimeSpan Timeout = ((System.TimeSpan)(inValues[2]));
            int IntrusionThreshold = ((int)(inValues[3]));
            return ((SecurityDoor.SecurityWeb.ISecurityDoorService)(this)).BeginAuthorizeKey(RoomNumber, CardKey, Timeout, IntrusionThreshold, callback, asyncState);
        }
        
        private object[] OnEndAuthorizeKey(System.IAsyncResult result) {
            SecurityDoor.SecurityWeb.AuthorizeResponse retVal = ((SecurityDoor.SecurityWeb.ISecurityDoorService)(this)).EndAuthorizeKey(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthorizeKeyCompleted(object state) {
            if ((this.AuthorizeKeyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthorizeKeyCompleted(this, new AuthorizeKeyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthorizeKeyAsync(int RoomNumber, System.Guid CardKey, System.TimeSpan Timeout, int IntrusionThreshold) {
            this.AuthorizeKeyAsync(RoomNumber, CardKey, Timeout, IntrusionThreshold, null);
        }
        
        public void AuthorizeKeyAsync(int RoomNumber, System.Guid CardKey, System.TimeSpan Timeout, int IntrusionThreshold, object userState) {
            if ((this.onBeginAuthorizeKeyDelegate == null)) {
                this.onBeginAuthorizeKeyDelegate = new BeginOperationDelegate(this.OnBeginAuthorizeKey);
            }
            if ((this.onEndAuthorizeKeyDelegate == null)) {
                this.onEndAuthorizeKeyDelegate = new EndOperationDelegate(this.OnEndAuthorizeKey);
            }
            if ((this.onAuthorizeKeyCompletedDelegate == null)) {
                this.onAuthorizeKeyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthorizeKeyCompleted);
            }
            base.InvokeAsync(this.onBeginAuthorizeKeyDelegate, new object[] {
                        RoomNumber,
                        CardKey,
                        Timeout,
                        IntrusionThreshold}, this.onEndAuthorizeKeyDelegate, this.onAuthorizeKeyCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SecurityDoor.SecurityWeb.ISecurityDoorService.BeginDoorReset(int RoomNumber, System.Guid CardKey, System.TimeSpan Timeout, int IntrusionThreshold, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoorReset(RoomNumber, CardKey, Timeout, IntrusionThreshold, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SecurityDoor.SecurityWeb.AuthorizeResponse SecurityDoor.SecurityWeb.ISecurityDoorService.EndDoorReset(System.IAsyncResult result) {
            return base.Channel.EndDoorReset(result);
        }
        
        private System.IAsyncResult OnBeginDoorReset(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int RoomNumber = ((int)(inValues[0]));
            System.Guid CardKey = ((System.Guid)(inValues[1]));
            System.TimeSpan Timeout = ((System.TimeSpan)(inValues[2]));
            int IntrusionThreshold = ((int)(inValues[3]));
            return ((SecurityDoor.SecurityWeb.ISecurityDoorService)(this)).BeginDoorReset(RoomNumber, CardKey, Timeout, IntrusionThreshold, callback, asyncState);
        }
        
        private object[] OnEndDoorReset(System.IAsyncResult result) {
            SecurityDoor.SecurityWeb.AuthorizeResponse retVal = ((SecurityDoor.SecurityWeb.ISecurityDoorService)(this)).EndDoorReset(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDoorResetCompleted(object state) {
            if ((this.DoorResetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoorResetCompleted(this, new DoorResetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoorResetAsync(int RoomNumber, System.Guid CardKey, System.TimeSpan Timeout, int IntrusionThreshold) {
            this.DoorResetAsync(RoomNumber, CardKey, Timeout, IntrusionThreshold, null);
        }
        
        public void DoorResetAsync(int RoomNumber, System.Guid CardKey, System.TimeSpan Timeout, int IntrusionThreshold, object userState) {
            if ((this.onBeginDoorResetDelegate == null)) {
                this.onBeginDoorResetDelegate = new BeginOperationDelegate(this.OnBeginDoorReset);
            }
            if ((this.onEndDoorResetDelegate == null)) {
                this.onEndDoorResetDelegate = new EndOperationDelegate(this.OnEndDoorReset);
            }
            if ((this.onDoorResetCompletedDelegate == null)) {
                this.onDoorResetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoorResetCompleted);
            }
            base.InvokeAsync(this.onBeginDoorResetDelegate, new object[] {
                        RoomNumber,
                        CardKey,
                        Timeout,
                        IntrusionThreshold}, this.onEndDoorResetDelegate, this.onDoorResetCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SecurityDoor.SecurityWeb.ISecurityDoorService CreateChannel() {
            return new SecurityDoorServiceClientChannel(this);
        }
        
        private class SecurityDoorServiceClientChannel : ChannelBase<SecurityDoor.SecurityWeb.ISecurityDoorService>, SecurityDoor.SecurityWeb.ISecurityDoorService {
            
            public SecurityDoorServiceClientChannel(System.ServiceModel.ClientBase<SecurityDoor.SecurityWeb.ISecurityDoorService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginNotifyDoorStatus(int RoomNumber, bool IsOpen, bool IsLocked, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = RoomNumber;
                _args[1] = IsOpen;
                _args[2] = IsLocked;
                System.IAsyncResult _result = base.BeginInvoke("NotifyDoorStatus", _args, callback, asyncState);
                return _result;
            }
            
            public void EndNotifyDoorStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("NotifyDoorStatus", _args, result);
            }
            
            public System.IAsyncResult BeginAuthorizeKey(int RoomNumber, System.Guid CardKey, System.TimeSpan Timeout, int IntrusionThreshold, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = RoomNumber;
                _args[1] = CardKey;
                _args[2] = Timeout;
                _args[3] = IntrusionThreshold;
                System.IAsyncResult _result = base.BeginInvoke("AuthorizeKey", _args, callback, asyncState);
                return _result;
            }
            
            public SecurityDoor.SecurityWeb.AuthorizeResponse EndAuthorizeKey(System.IAsyncResult result) {
                object[] _args = new object[0];
                SecurityDoor.SecurityWeb.AuthorizeResponse _result = ((SecurityDoor.SecurityWeb.AuthorizeResponse)(base.EndInvoke("AuthorizeKey", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDoorReset(int RoomNumber, System.Guid CardKey, System.TimeSpan Timeout, int IntrusionThreshold, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = RoomNumber;
                _args[1] = CardKey;
                _args[2] = Timeout;
                _args[3] = IntrusionThreshold;
                System.IAsyncResult _result = base.BeginInvoke("DoorReset", _args, callback, asyncState);
                return _result;
            }
            
            public SecurityDoor.SecurityWeb.AuthorizeResponse EndDoorReset(System.IAsyncResult result) {
                object[] _args = new object[0];
                SecurityDoor.SecurityWeb.AuthorizeResponse _result = ((SecurityDoor.SecurityWeb.AuthorizeResponse)(base.EndInvoke("DoorReset", _args, result)));
                return _result;
            }
        }
    }
}
